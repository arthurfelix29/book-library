// <auto-generated />
using System;
using BookLibrary.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookLibrary.Infra.Data.Migrations
{
    [DbContext(typeof(BookLibraryContext))]
    [Migration("20240322012400_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookLibrary.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.ToTable("author", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Jane",
                            LastName = "Austen"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Harper",
                            LastName = "Lee"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "J.D.",
                            LastName = "Salinger"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "F. Scott",
                            LastName = "Fitzgerald"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Paulo",
                            LastName = "Coelho"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Markus",
                            LastName = "Zusak"
                        },
                        new
                        {
                            Id = 7,
                            FirstName = "C.S.",
                            LastName = "Lewis"
                        },
                        new
                        {
                            Id = 8,
                            FirstName = "Dan",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = 9,
                            FirstName = "John",
                            LastName = "Steinbeck"
                        },
                        new
                        {
                            Id = 10,
                            FirstName = "Douglas",
                            LastName = "Adams"
                        },
                        new
                        {
                            Id = 11,
                            FirstName = "Herman",
                            LastName = "Melville"
                        });
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("CopiesInUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("copies_in_use");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("isbn");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("TotalCopies")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("total_copies");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[category_id] IS NOT NULL");

                    b.HasIndex("TypeId")
                        .IsUnique()
                        .HasFilter("[type_id] IS NOT NULL");

                    b.ToTable("book", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CopiesInUse = 80,
                            Isbn = "1234567891",
                            Title = "Pride and Prejudice",
                            TotalCopies = 100,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 1,
                            CopiesInUse = 65,
                            Isbn = "1234567892",
                            Title = "To Kill a Mockingbird",
                            TotalCopies = 75,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 1,
                            CopiesInUse = 45,
                            Isbn = "1234567893",
                            Title = "The Catcher in the Rye",
                            TotalCopies = 50,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CategoryId = 2,
                            CopiesInUse = 22,
                            Isbn = "1234567894",
                            Title = "The Great Gatsby",
                            TotalCopies = 50,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CategoryId = 3,
                            CopiesInUse = 35,
                            Isbn = "1234567895",
                            Title = "The Alchemist",
                            TotalCopies = 50,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            CategoryId = 4,
                            CopiesInUse = 11,
                            Isbn = "1234567896",
                            Title = "The Book Thief",
                            TotalCopies = 75,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            CategoryId = 5,
                            CopiesInUse = 14,
                            Isbn = "1234567897",
                            Title = "The Chronicles of Narnia",
                            TotalCopies = 100,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            CategoryId = 5,
                            CopiesInUse = 40,
                            Isbn = "1234567898",
                            Title = "The Da Vinci Code",
                            TotalCopies = 50,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            CategoryId = 1,
                            CopiesInUse = 35,
                            Isbn = "1234567899",
                            Title = "The Grapes of Wrath",
                            TotalCopies = 50,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            CategoryId = 2,
                            CopiesInUse = 35,
                            Isbn = "1234567900",
                            Title = "The Hitchhiker's Guide to the Galaxy",
                            TotalCopies = 50,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 11,
                            CategoryId = 1,
                            CopiesInUse = 8,
                            Isbn = "8901234567",
                            Title = "Moby-Dick",
                            TotalCopies = 30,
                            TypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            CategoryId = 2,
                            CopiesInUse = 0,
                            Isbn = "9012345678",
                            Title = "To Kill a Mockingbird",
                            TotalCopies = 20,
                            TypeId = 2
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            CategoryId = 2,
                            CopiesInUse = 1,
                            Isbn = "0123456789",
                            Title = "The Catcher in the Rye",
                            TotalCopies = 10,
                            TypeId = 1
                        });
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("bookCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Non-Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Biography"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Mystery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.BookType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("bookType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Hardcover"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Paperback"
                        });
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.Book", b =>
                {
                    b.HasOne("BookLibrary.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLibrary.Domain.Entities.BookCategory", "Category")
                        .WithOne("Book")
                        .HasForeignKey("BookLibrary.Domain.Entities.Book", "CategoryId");

                    b.HasOne("BookLibrary.Domain.Entities.BookType", "Type")
                        .WithOne("Book")
                        .HasForeignKey("BookLibrary.Domain.Entities.Book", "TypeId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.BookCategory", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();
                });

            modelBuilder.Entity("BookLibrary.Domain.Entities.BookType", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
